#ifndef __DAQ_COMMON_EXCEPTION_HPP__DEFINED__
#define __DAQ_COMMON_EXCEPTION_HPP__DEFINED__

#include <exception>
#include <string>

// Base class for errors: all errors are reported through objects 
// of derved classes, weather through the exception system or though
// error reporting functions


namespace DAQ { namespace Common {

	class Exception : public std::exception {
	public:
		Exception();
		virtual Exception * clone() = 0;
		virtual void rethrow() = 0;	
		virtual std::string getErrorString();
		virtual int getErrorCode() = 0;
		virtual int getObjectID() = 0;
		virtual bool isCritical();
	};

	
	

	// A base class to hold errors generated by the operative system
	class OSError : public Exception
	{
	protected:
		int errorCode;
	public:
		OSError(int err);
		virtual OSError * clone() = 0;
		virtual void rethrow() = 0;
		virtual const char * what() const throw ();
		virtual std::string getErrorString();
	};

	// A class to wrap exception pointers into
	class ExceptionCarrier : public Exception {
	public:
		ExceptionCarrier(Exception & e);
		ExceptionCarrier(const ExceptionCarrier & e);
		ExceptionCarrier * clone();
		virtual void rethrow();
		virtual ~ExceptionCarrier() throw();
		virtual const char * what() const throw();
		virtual std::string getErrorString();
		virtual int getErrorCode();
		virtual int getObjectID();	
	private:
		Exception * exception;
	};

}}
#endif
